/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.0.v20161208
 * Generated at: 2018-11-10 05:12:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.page_005fquery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class queryExceedBillTypeTask_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title></title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\"\r\n");
      out.write("\thref=\"/js/easyui/themes/default/easyui.css\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"/js/easyui/themes/icon.css\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"/js/easyui/jquery.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/js/easyui/jquery.easyui.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/js/easyui/locale/easyui-lang-zh_CN.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\t $(function(){\r\n");
      out.write("\t\t $('#datetime1').datebox({    \r\n");
      out.write("             onShowPanel : function() {// 显示日趋选择对象后再触发弹出月份层的事件，初始化时没有生成月份层    \r\n");
      out.write("                 span.trigger('click'); // 触发click事件弹出月份层    \r\n");
      out.write("                 if (!tds)    \r\n");
      out.write("                     setTimeout(function() {// 延时触发获取月份对象，因为上面的事件触发和对象生成有时间间隔    \r\n");
      out.write("                         tds = p.find('div.calendar-menu-month-inner td');    \r\n");
      out.write("                         tds.click(function(e) {    \r\n");
      out.write("                             e.stopPropagation(); // 禁止冒泡执行easyui给月份绑定的事件    \r\n");
      out.write("                             var year = /\\d{4}/.exec(span.html())[0]// 得到年份    \r\n");
      out.write("                             , month = parseInt($(this).attr('abbr'), 10) + 1; // 月份    \r\n");
      out.write("                             $('#datetime1').datebox('hidePanel')// 隐藏日期对象    \r\n");
      out.write("                             .datebox('setValue', year + '-' + month); // 设置日期的值    \r\n");
      out.write("                         });    \r\n");
      out.write("                     }, 0);    \r\n");
      out.write("             },    \r\n");
      out.write("             parser : function(s) {// 配置parser，返回选择的日期    \r\n");
      out.write("                 if (!s)    \r\n");
      out.write("                     return new Date();    \r\n");
      out.write("                 var arr = s.split('-');    \r\n");
      out.write("                 return new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, 1);    \r\n");
      out.write("             },    \r\n");
      out.write("             formatter : function(d) {    \r\n");
      out.write("                 var month = d.getMonth();  \r\n");
      out.write("                 if(month<10){  \r\n");
      out.write("                     month = \"0\"+month;  \r\n");
      out.write("                 }  \r\n");
      out.write("                 if (d.getMonth() == 0) {    \r\n");
      out.write("                     return d.getFullYear()-1 + '-' + 12;    \r\n");
      out.write("                 } else {    \r\n");
      out.write("                     return d.getFullYear() + '-' + month;    \r\n");
      out.write("                 }    \r\n");
      out.write("             }// 配置formatter，只返回年月    \r\n");
      out.write("         });    \r\n");
      out.write("         var p = $('#datetime1').datebox('panel'), // 日期选择对象    \r\n");
      out.write("         tds = false, // 日期选择对象中月份    \r\n");
      out.write("         span = p.find('span.calendar-text'); // 显示月份层的触发控件 \r\n");
      out.write("\t});\r\n");
      out.write("\t function doSearch() {\r\n");
      out.write("\t\t var opts = $(\"#tt\").datagrid(\"options\");\r\n");
      out.write("\t\t opts.url = \"/TaskQueryServlet?method=queryExceedBillTypeTask\";\r\n");
      out.write("\t\t $('#tt').datagrid('load', {\r\n");
      out.write("\t\t\tdate : $('#datetime1').val(),\r\n");
      out.write("\t\t}); \r\n");
      out.write("\t}\r\n");
      out.write("\tfunction doClear(){\r\n");
      out.write("\t\t$('#datetime1').datebox('setValue', '');\r\n");
      out.write("\t}  \r\n");
      out.write("</script>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\ttd[field=\"otherBill\"]{\r\n");
      out.write("\t\tcolor: red;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<table id=\"tt\" class=\"easyui-datagrid\"\r\n");
      out.write("\t\tstyle=\"width: 100%; height: 500px\" url=\"\"\r\n");
      out.write("\t\ttoolbar=\"#tb\" title=\"费用类型超出查询\" iconCls=\"icon-save\" rownumbers=\"true\"\r\n");
      out.write("\t\tpagination=\"true\">\r\n");
      out.write("\t\t<thead>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th field=\"taskId\" width=\"120\" align=\"center\">任务编号</th>\r\n");
      out.write("\t\t\t\t<th field=\"inviteOrg\" width=\"120\" align=\"center\">归属机关</th>\r\n");
      out.write("\t\t\t\t<th field=\"visitorOrg\" width=\"120\" align=\"center\">来访单位</th>\r\n");
      out.write("\t\t\t\t<th field=\"visitorNum\" width=\"120\" align=\"center\">来访人数</th>\r\n");
      out.write("\t\t\t\t<th field=\"visitorDate_str\" width=\"120\" align=\"center\">抵达时间</th>\r\n");
      out.write("\t\t\t\t<th field=\"leaveDate_str\" width=\"120\" align=\"center\">离开时间</th>\r\n");
      out.write("\t\t\t\t<th field=\"otherBill\" width=\"120\" align=\"center\">其他类型费用</th>\r\n");
      out.write("\t\t\t\t<th field=\"office\" width=\"120\" align=\"center\">承办处室</th>\r\n");
      out.write("\t\t\t\t<th field=\"staff\" width=\"120\" align=\"center\">接待员</th>\r\n");
      out.write("\t\t\t\t<th field=\"task_status\" width=\"120\" align=\"center\">任务状态</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t<div id=\"tb\" style=\"padding: 3px\">\r\n");
      out.write("\t\t<span>时间</span> <input type=\"text\" id=\"datetime1\"  class=\"easyui-datetimebox\" style=\"line-height: 26px; border: 1px solid #ccc\">  \r\n");
      out.write("\t\t<a href=\"#\" class=\"easyui-linkbutton\" plain=\"true\" onclick=\"doSearch()\">点击搜索</a>\r\n");
      out.write("\t\t<a href=\"#\" class=\"easyui-linkbutton\" plain=\"true\" onclick=\"doClear()\">清空搜索条件</a>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
