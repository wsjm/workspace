package com.keduo.controller;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Map;

import javax.naming.InterruptedNamingException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.alibaba.fastjson.JSONObject;
import com.keduo.service.TaskQueryService;
import com.keduo.service.impl.TaskQueryServiceImpl;

/**
 * 任务查询
 * Servlet implementation class TaskQueryServlet
 */
public class TaskQueryServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	TaskQueryService taskQueryService;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public TaskQueryServlet() {	
        super();
        taskQueryService = new TaskQueryServiceImpl();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String methodName = request.getParameter("method");
		Method method;
		try {
			method = com.keduo.controller.TaskQueryServlet.class.getDeclaredMethod(methodName, HttpServletRequest.class,HttpServletResponse.class);
			method.setAccessible(true);
			method.invoke(this, request,response);
		} catch (NoSuchMethodException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}
	/**
	 * 归属机关查询
	 * @throws IOException 
	 * @throws ParseException 
	 */
	private void queryInviteOrg(HttpServletRequest request, HttpServletResponse response) throws IOException, ParseException {
		String date_str = request.getParameter("date");//时间（来宾离开时间）
		String org_str=request.getParameter("org");//归属机关
		String visittypeId_str = request.getParameter("visittypeId");//任务形式
		String page_str = request.getParameter("page");//当前页码
		String num_str = request.getParameter("rows");//每页条数
		int num = 0;
		int page =0;
		int org = 0;
		int visittypeId=0;
		Date date = null;
		if (page_str == null || page_str.trim().length() == 0) {
			page = 1;//如果页面没有传入page，则page=1当前第一页
		} else {
			page = Integer.valueOf(page_str);
		}

		if (num_str == null || num_str.trim().length() == 0) {
			num = 5;//如果页面没有传入每页每数则默认每页5条记录
		} else {
			num = Integer.valueOf(num_str);
		}
		if (date_str == null || date_str.trim().length() == 0) {
			date = null;//如果页面没有传入date，则date=null
		}else{
			date=new Date(new SimpleDateFormat("yyyy-MM-dd").parse(date_str).getTime());
		}
		if(org_str == null || org_str.trim().length() == 0) {
			org=-1;
		}else {
			org = Integer.valueOf(org_str);
		}
		if(visittypeId_str == null || visittypeId_str.trim().length() == 0) {
			visittypeId=-1;
		}else {
			visittypeId=Integer.valueOf(visittypeId_str);
		}
		Map<String,Object> map = taskQueryService.queryInviteOrg(date, org, visittypeId, num, page);
		String json = JSONObject.toJSONString(map);
		System.out.println(json);
		response.getWriter().println(json);
		
	}
	/**
	 * 承办处室查询
	 * @param request
	 * @param response
	 * @throws IOException 
	 */
	private void queryDept(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String staffId_str=request.getParameter("staffId");//接待员
		String officeId_str = request.getParameter("officeId");//承办处室
		String taskId = request.getParameter("taskId");//任务ID
		String task_status_str = request.getParameter("task_status");//任务状态
		String page_str = request.getParameter("page");
		String num_str = request.getParameter("rows");
		int num = 0;
		int page =0;
		int staffId=0;
		int officeId=0;
		int task_statusId=0;
		if (page_str == null || page_str.trim().length() == 0) {
			page = 1;//如果页面没有传入page，则page=1当前第一页
		} else {
			page = Integer.valueOf(page_str);
		}

		if (num_str == null || num_str.trim().length() == 0) {
			num = 5;//如果页面没有传入每页每数则默认每页5条记录
		} else {
			num = Integer.valueOf(num_str);
		}
		if (staffId_str == null || staffId_str.trim().length() == 0) {
			staffId = -1;//如果页面没有传入staff，则staff=null
		}else {
			staffId=Integer.valueOf(staffId_str);
		}
		if(officeId_str == null || officeId_str.trim().length() == 0) {
			officeId=-1;
		}else {
			officeId=Integer.valueOf(officeId_str);
		}
		if(taskId == null || taskId.trim().length() == 0) {
			taskId=null;
		}
		if(task_status_str == null || task_status_str.trim().length() == 0) {
			task_statusId=-1;
		}else {
			task_statusId=Integer.valueOf(task_status_str);
		}
		
		Map<String,Object> map = taskQueryService.queryDept(staffId, officeId, taskId,task_statusId, num, page);
		String json = JSONObject.toJSONString(map);
		response.getWriter().println(json);
	}
	/**
	 * 任务费用查询
	 * @param request
	 * @param response
	 * @throws ParseException 
	 * @throws IOException 
	 */
	private void queryBill(HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException {
		String org_str = request.getParameter("org");//归属机关
		String date_str = request.getParameter("date");//来宾离开时间
		String page_str = request.getParameter("page");
		String num_str = request.getParameter("rows");
		int num = 0;
		int page =0;
		Date date = null;
		int org = 0;
		if (page_str == null || page_str.trim().length() == 0) {
			page = 1;//如果页面没有传入page，则page=1当前第一页
		} else {
			page = Integer.valueOf(page_str);
		}

		if (num_str == null || num_str.trim().length() == 0) {
			num = 5;//如果页面没有传入每页每数则默认每页5条记录
		} else {
			num = Integer.valueOf(num_str);
		}
		if (date_str == null || date_str.trim().length() == 0) {
			date = null;//如果页面没有传入date，则date=null
		}else{
			date=new Date(new SimpleDateFormat("yyyy-MM-dd").parse(date_str).getTime());
		}
		if(org_str == null || org_str.trim().length() == 0) {
			org=-1;
		}else {
			org=Integer.valueOf(org_str);
		}
		Map<String,Object> map = taskQueryService.queryBill(date,org,num,page);
		String json = JSONObject.toJSONString(map);
		response.getWriter().println(json);
	}
	/**
	 * 任务办结预警查询
	 * @param request
	 * @param response
	 * @throws IOException 
	 */
	private void queryUnclosedTask(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String page_str = request.getParameter("page");
		String num_str = request.getParameter("rows");
		int num = 0;
		int page =0;
		
		if (page_str == null || page_str.trim().length() == 0) {
			page = 1;//如果页面没有传入page，则page=1当前第一页
		} else {
			page = Integer.valueOf(page_str);
		}

		if (num_str == null || num_str.trim().length() == 0) {
			num = 5;//如果页面没有传入每页每数则默认每页5条记录
		} else {
			num = Integer.valueOf(num_str);
		}
		Map<String,Object> map = taskQueryService.queryUnclosedTask(num,page);
		String json = JSONObject.toJSONString(map);
		response.getWriter().println(json);
		
	}
	/**
	 * 费用超支任务查询
	 * @throws IOException 
	 */
	private void queryOverspendTask(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String page_str = request.getParameter("page");
		String num_str = request.getParameter("rows");
		String year_str = request.getParameter("year");
		String month_str = request.getParameter("month");
		int num = 0;
		int page =0;
		int year = 0;
		int month=0;
		
		if (page_str == null || page_str.trim().length() == 0) {
			page = 1;//如果页面没有传入page，则page=1当前第一页
		} else {
			page = Integer.valueOf(page_str);
		}

		if (num_str == null || num_str.trim().length() == 0) {
			num = 5;//如果页面没有传入每页每数则默认每页5条记录
		} else {
			num = Integer.valueOf(num_str);
		}
		if (year_str == null || year_str.trim().length() == 0) {
			year = -1;
		} else {
			year = Integer.valueOf(year_str);
		}
		if (month_str == null || month_str.trim().length() == 0) {
			month = -1;
		} else {
			month = Integer.valueOf(month_str);
		}
		Map<String,Object> map = taskQueryService.queryOverspendTask(year,month,num,page);
		String json = JSONObject.toJSONString(map);
		response.getWriter().println(json);
	}
	/**
	 * 费用类型超出查询
	 * @param request
	 * @param response
	 * @throws IOException 
	 */
	private void queryExceedBillTypeTask(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String page_str = request.getParameter("page");
		String num_str = request.getParameter("rows");
		String year_str = request.getParameter("year");
		String month_str = request.getParameter("month");
		int num = 0;
		int page =0;
		int year = 0;
		int month=0;
		
		if (page_str == null || page_str.trim().length() == 0) {
			page = 1;//如果页面没有传入page，则page=1当前第一页
		} else {
			page = Integer.valueOf(page_str);
		}

		if (num_str == null || num_str.trim().length() == 0) {
			num = 5;//如果页面没有传入每页每数则默认每页5条记录
		} else {
			num = Integer.valueOf(num_str);
		}
		if (year_str == null || year_str.trim().length() == 0) {
			year = -1;
		} else {
			year = Integer.valueOf(year_str);
		}
		if (month_str == null || month_str.trim().length() == 0) {
			month = -1;
		} else {
			month = Integer.valueOf(month_str);
		}
		Map<String,Object> map = taskQueryService.queryExceedBillTypeTask(year,month,num,page);
		String json = JSONObject.toJSONString(map);
		response.getWriter().println(json);
	}

}
