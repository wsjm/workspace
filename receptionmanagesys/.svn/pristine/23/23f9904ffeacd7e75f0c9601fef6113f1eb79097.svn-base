package com.keduo.dao.impl;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.keduo.dao.FeedbackOrderDao;
import com.keduo.entity.Bill;
import com.keduo.entity.Role;
import com.keduo.entity.TaskOrder;
import com.keduo.util.DBUtil;
import com.keduo.util.SetTaskOrder;

public class FeedbackOrderDaoImpl extends BaseDaoImpl<TaskOrder> implements FeedbackOrderDao{

	@Override
	public Map<String, Object> SelectFeedbackOrder(String taskId, int officeId, int inviteOrgId, int feedback_status,
			Date visitorDate, Date leaveDate, int num, int page){
		Connection con = null;
		PreparedStatement pstm = null;
		ResultSet rs = null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<TaskOrder> taskList = new ArrayList<TaskOrder>();
		String sql = null;
		StringBuffer sql1 = new StringBuffer();
			sql1.append("select * from taskorder where (task_statusId=4 or task_statusId=5)");
			if (taskId != null) {
				sql1.append(" and taskId='" + taskId + "' ");
			}
			if (officeId != 0) {
				sql1.append(" and officeId=" + officeId + " ");
			}
			if (inviteOrgId != 0) {
				sql1.append(" and inviteOrgId=" + inviteOrgId + " ");
			}
			if (feedback_status != 0) {
				sql1.append(" and feedback_status=" + feedback_status + " ");
			}
			if (visitorDate != null) {
				sql1.append(" and visitorDate >='" +visitorDate + "' ");
			}
			if (leaveDate != null) {
				sql1.append(" and leaveDate <='" +leaveDate + "' ");
			}
			sql1.append(" limit ?,?");
			sql = sql1.toString();
			System.out.println(sql);
		try {
			con = DBUtil.getconnection();
			pstm = con.prepareStatement(sql);
			pstm.setInt(1, (page - 1) * num);
			pstm.setInt(2, num);
			rs = pstm.executeQuery();
			while (rs.next()) {
				TaskOrder taskOrder = new TaskOrder();
				taskOrder.setTaskid(rs.getString("taskid"));
				taskOrder.setTaskname(rs.getString("taskname"));
				taskOrder.setVisitorOrg(rs.getString("VisitorOrg"));
				taskOrder.setVisitorNum(rs.getInt("VisitorNum"));
				taskOrder.setVisitorDate(rs.getDate("VisitorDate"));
				taskOrder.setLeaveDate(rs.getDate("leaveDate"));
				taskOrder.setInviteOrgId(rs.getInt("inviteOrgId"));
				taskOrder.setHotel(rs.getString("hotel"));
				taskOrder.setMealsBudget(rs.getDouble("mealsBudget"));
				taskOrder.setLiveBudget(rs.getDouble("livebudget"));
				taskOrder.setOthers(rs.getString("others"));
				taskOrder.setOfficeId(rs.getInt("officeId"));
				taskOrder.setDirectorId(rs.getInt("directorId"));
				taskOrder.setStaffId(rs.getInt("staffId"));
				taskOrder.setTask_statusId(rs.getInt("task_statusId"));
				taskOrder.setVisittypeId(rs.getInt("visittypeId"));
				taskOrder.setFeedbackcontext(rs.getString("feedbackcontext"));
				taskOrder.setFeedbacksubmittime(rs.getDate("feedbacksubmittime"));
				taskOrder.setFeedback_statusId(rs.getInt("feedback_statusId"));
				
				taskList.add(SetTaskOrder.setTaskOrder(taskOrder));
			}
			System.out.println(taskList);
			int total = taskList.size();
			int allpage = total / num + 1;
			map.put("allpage", allpage);
			map.put("page", page);
			map.put("total", total);
			map.put("num", num);
			map.put("rows", taskList);
			return map;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				DBUtil.closeResource(con, pstm, rs);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}
	

	@Override
	public int UpdateFeedbackOrder(Role role, TaskOrder taskorder) {
		// TODO Auto-generated method stub
		return 0;
	}
	

	@Override
	public Map<String, Object> SelectFeedbackOrder(String taskId, String taskname, int officeId, int feedback_status,
			Date visitorDate, Date leaveDate, int num, int page) {
		Connection con = null;
		PreparedStatement pstm = null;
		ResultSet rs = null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<TaskOrder> taskList = new ArrayList<TaskOrder>();
		String sql = null;
		StringBuffer sql1 = new StringBuffer();
			sql1.append("select * from taskorder where (task_statusId=4 or task_statusId=5)");
			if (taskId != null) {
				sql1.append(" and taskId=" + taskId + " ");
			}
			if (taskname != null) {
				sql1.append(" and taskname='" + taskname + "' ");
			}
			if (officeId != 0) {
				sql1.append(" and officeId=" + officeId + " ");
			}
			if (feedback_status != 0) {
				sql1.append(" and feedback_status=" + feedback_status + " ");
			}
			if (visitorDate != null) {
				sql1.append(" and visitorDate >='" +visitorDate + "' ");
			}
			if (leaveDate != null) {
				sql1.append(" and leaveDate <='" +leaveDate + "' ");
			}
			sql1.append("limit ?,?");
			sql = sql1.toString();
			
		try {
			con = DBUtil.getconnection();
			pstm = con.prepareStatement(sql);
			pstm.setInt(1, (page - 1) * num);
			pstm.setInt(2, num);
			rs = pstm.executeQuery();
			while (rs.next()) {
				TaskOrder taskOrder = new TaskOrder();
				taskOrder.setTaskid(rs.getString("taskid"));
				taskOrder.setTaskname(rs.getString("taskname"));
				taskOrder.setVisitorOrg(rs.getString("VisitorOrg"));
				taskOrder.setVisitorNum(rs.getInt("VisitorNum"));
				taskOrder.setVisitorDate(rs.getDate("VisitorDate"));
				taskOrder.setLeaveDate(rs.getDate("leaveDate"));
				taskOrder.setInviteOrgId(rs.getInt("inviteOrgId"));
				taskOrder.setHotel(rs.getString("hotel"));
				taskOrder.setMealsBudget(rs.getDouble("mealsBudget"));
				taskOrder.setLiveBudget(rs.getDouble("livebudget"));
				taskOrder.setOthers(rs.getString("others"));
				taskOrder.setOfficeId(rs.getInt("officeId"));
				taskOrder.setDirectorId(rs.getInt("directorId"));
				taskOrder.setStaffId(rs.getInt("staffId"));
				taskOrder.setTask_statusId(rs.getInt("task_statusId"));
				taskOrder.setVisittypeId(rs.getInt("visittypeId"));
				taskOrder.setFeedbackcontext(rs.getString("feedbackcontext"));
				taskOrder.setFeedbacksubmittime(rs.getDate("feedbacksubmittime"));
				taskOrder.setFeedback_statusId(rs.getInt("feedback_statusId"));
				
				taskList.add(SetTaskOrder.setTaskOrder(taskOrder));
			}
			System.out.println(taskList);
			int total = taskList.size();
			int allpage = total / num + 1;
			map.put("allpage", allpage);
			map.put("page", page);
			map.put("total", total);
			map.put("num", num);
			map.put("rows", taskList);
			return map;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				DBUtil.closeResource(con, pstm, rs);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}
	@Override
	public int insertFee(Role role, Bill bill) {
		// 申明受影响行数
		int row = 0;
		// 申请工具类
		Connection con = null;
		PreparedStatement pstm = null;
		String sql = "INSERT INTO menu VALUES(NULL , ?, ?, ?, ?, ?);";
		try {
			// 获取连接
			con = DBUtil.getconnection();
			// 获取 ps 工具
			pstm = con.prepareStatement(sql);
			// ps设置参数
			DBUtil.psValus(pstm, bill.getBilltype(), bill.getBill(), 
					bill.getBilltime(), bill.getShop(), bill.getFeedbackorder());
			// 执行sql
			row = pstm.executeUpdate();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} finally {
		try {
			DBUtil.closeResource(con, pstm, rs);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	return row;
}


	@Override
	public Map<String, Object> SelectFeedbackOrder(String taskId, String taskname, int feedback_status, Date visitorDate,
			Date leaveDate, int num, int page) {
		Connection con = null;
		PreparedStatement pstm = null;
		ResultSet rs = null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<TaskOrder> taskList = new ArrayList<TaskOrder>();
		String sql = null;
		StringBuffer sql1 = new StringBuffer();
			sql1.append("select * from taskorder where (task_statusId=4 or task_statusId=5)");
			if (taskId != null) {
				sql1.append(" and taskId='" + taskId + "' ");
			}
			if (taskname != null) {
				sql1.append(" and taskname='" + taskname + "' ");
			}
			if (feedback_status != 0) {
				sql1.append(" and feedback_status=" + feedback_status + " ");
			}
			if (visitorDate != null) {
				sql1.append(" and visitorDate >='" +visitorDate + "' ");
			}
			if (leaveDate != null) {
				sql1.append(" and leaveDate <='" +leaveDate + "' ");
			}
			sql1.append(" limit ?,?");
			sql = sql1.toString();
			
		try {
			con = DBUtil.getconnection();
			pstm = con.prepareStatement(sql);
			pstm.setInt(1, (page - 1) * num);
			pstm.setInt(2, num);
			rs = pstm.executeQuery();
			while (rs.next()) {
				TaskOrder taskOrder = new TaskOrder();
				taskOrder.setTaskid(rs.getString("taskid"));
				taskOrder.setTaskname(rs.getString("taskname"));
				taskOrder.setVisitorOrg(rs.getString("VisitorOrg"));
				taskOrder.setVisitorNum(rs.getInt("VisitorNum"));
				taskOrder.setVisitorDate(rs.getDate("VisitorDate"));
				taskOrder.setLeaveDate(rs.getDate("leaveDate"));
				taskOrder.setInviteOrgId(rs.getInt("inviteOrgId"));
				taskOrder.setHotel(rs.getString("hotel"));
				taskOrder.setMealsBudget(rs.getDouble("mealsBudget"));
				taskOrder.setLiveBudget(rs.getDouble("livebudget"));
				taskOrder.setOthers(rs.getString("others"));
				taskOrder.setOfficeId(rs.getInt("officeId"));
				taskOrder.setDirectorId(rs.getInt("directorId"));
				taskOrder.setStaffId(rs.getInt("staffId"));
				taskOrder.setTask_statusId(rs.getInt("task_statusId"));
				taskOrder.setVisittypeId(rs.getInt("visittypeId"));
				taskOrder.setFeedbackcontext(rs.getString("feedbackcontext"));
				taskOrder.setFeedbacksubmittime(rs.getDate("feedbacksubmittime"));
				taskOrder.setFeedback_statusId(rs.getInt("feedback_statusId"));
				
				taskList.add(SetTaskOrder.setTaskOrder(taskOrder));
			}
			System.out.println(taskList);
			int total = taskList.size();
			int allpage = total / num + 1;
			map.put("allpage", allpage);
			map.put("page", page);
			map.put("total", total);
			map.put("num", num);
			map.put("rows", taskList);
			return map;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				DBUtil.closeResource(con, pstm, rs);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}


	@Override
	public int CheckFeedbackOrder(Role role, TaskOrder taskorder) {
		// TODO Auto-generated method stub
		return 0;
	}

}
