package com.keduo.controller;

import java.io.IOException;
import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.alibaba.fastjson.JSONObject;
import com.keduo.service.TaskQueryService;

/**
 * 反馈单管理
 * Servlet implementation class FeedbackOrderServlet
 */
public class FeedbackOrderServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	TaskQueryService taskQueryService;
    /**
     * @see HttpServlet#HttpServlet()
     */
    public FeedbackOrderServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}
	
	private void queryFeedbackOrder(HttpServletRequest request, HttpServletResponse response) throws IOException, ParseException {
		String date_str = request.getParameter("date");//时间（来宾离开时间）
		String org_str=request.getParameter("org");//归属机关
		String visittypeId_str = request.getParameter("visittypeId");//任务形式
		String page_str = request.getParameter("page");//当前页码
		String num_str = request.getParameter("rows");//每页条数
		//System.out.println(date_str+"----"+org_str+"-----"+visittypeId_str);
		int num = 0;
		int page =0;
		int org = 0;
		int visittypeId=0;
		Date date = null;
		if (page_str == null || page_str.trim().length() == 0) {
			page = 1;//如果页面没有传入page，则page=1当前第一页
		} else {
			page = Integer.valueOf(page_str);
		}

		if (num_str == null || num_str.trim().length() == 0) {
			num = 5;//如果页面没有传入每页每数则默认每页5条记录
		} else {
			num = Integer.valueOf(num_str);
		}
		if (date_str == null || date_str.trim().length() == 0) {
			date = null;//如果页面没有传入date，则date=null
		}else{
			date=new Date(new SimpleDateFormat("yyyy-MM-dd").parse(date_str).getTime());
		}
		if(org_str == null || org_str.trim().length() == 0) {
			org=-1;
		}else {
			org = Integer.valueOf(org_str);
		}
		if(visittypeId_str == null || visittypeId_str.trim().length() == 0) {
			visittypeId=-1;
		}else {
			visittypeId=Integer.valueOf(visittypeId_str);
		}
		//System.out.println(date+"++" + org + "++" + visittypeId);
		Map<String,Object> map = taskQueryService.queryInviteOrg(date, org, visittypeId, num, page);
		String json = JSONObject.toJSONString(map);
		//System.out.println(json);
		response.getWriter().println(json);
		
	}

}
